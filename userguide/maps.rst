.. index:: maps
.. _maps:

Supported datasets
===================

Vector maps
+++++++++++++

To have maps showing up in this submenu you will need to download some vector maps.
Once the `*`.map file has been downloaded, it just needs to be placed in the *maps* 
folder and it will then automatically appear in the available vector maps list.

Vector maps are kindly generated by two different sources:

* mapsforge
* openandmaps

mapsforge
~~~~~~~~~~~~~

The standard maps generated, maintained and distributed by the `mapsforge <http://code.google.com/p/mapsforge/>`_
team and downloadable from `their server <http://download.mapsforge.org/>`_.

In their default style they kind of look like:

.. figure:: wiki/images/47_mapsforge.png
   :align: center

openandmaps
~~~~~~~~~~~~~

`Openandromaps <http://www.openandromaps.org>`_ generates maps following the opencycle 
theme, with isolines and more hiking related stuff. The map files are larger but worth 
every byte. Their `download area is here <http://www.openandromaps.org/en/download.html>`_.

With the Oruxmaps theme that is available from the download area, the maps look like:

.. figure:: wiki/images/48_openandmaps.png
   :align: center

Apply a render theme
~~~~~~~~~~~~~~~~~~~~~~~~

Geopaparazzi applies render themes if they are found on the disk. In order to be
found, the render theme xml file needs to have the same name as the map file. 
Ex, the above cycle map example has a::
    
    italy_cycle.map

and a::

    italy_cycle.xml

render theme file in the *maps folder at the root of the sdcard*.


Custom tiles based maps (local and remote)
+++++++++++++++++++++++++++++++++++++++++++++++++

Custom tile sources appear in the main sources list if a definition of the 
source is found in the *maps* folder.

Tile Sources definitions are simple text files that need to have the 
extention *.mapurl* to be recognised by geopaparazzi.

* View [[`A (hopefully complete) `|.mapurl-parameters]]  .mapurl parameter list

Let's see two different tile source definitions, one bound to a remote service 
and one bound to a local.

Remote Tile sources
~~~~~~~~~~~~~~~~~~~~~~

An example for a remote tiles source is::

    url=http://myserver/tmsservice/ZZZ/XXX/YYY.png
    minzoom=12
    maxzoom=18
    center=11.40553 46.39478
    type=tms

The necessary information is:

* the url of the tile server, having:

  - *ZZZ* instead of the zoom level
  - *XXX* instead of the tile column number
  - *YYY* instead of the tile row number
  
  One good example to understand what that means it once again Openstreetmap, where 
  http://a.tile.openstreetmap.org/9/271/182.png has ZZZ=9, XXX=271 and YYY=182.

* the minimum zoom level that is supported
* the maximum zoom level that is supported
* the center of the tile source
* the type fo tile server. Currently both `standard TMS <http://en.wikipedia.org/wiki/Tile_Map_Service>`_
  and google based numbering of the tiles is supported by the line:

  * type=tms
  * type=google

Also WMS works as remote source, as long as it can be accessed through an **EPSG:4326** projection. 

An example is::

    url=http://sdi.provincia.bz.it/geoserver/wms?LAYERS=inspire:OI.ORTHOIMAGECOVERAGE.2011&TRANSPARENT=true&FORMAT=image/png&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&STYLES=&EXCEPTIONS=application/vnd.ogc.se_inimage&SRS=EPSG:4326&BBOX=XXX,YYY,XXX,YYY&WIDTH=256&HEIGHT=256
    minzoom=0
    maxzoom=20
    center=11.42 46.8
    type=wms

Important here are:

* SRS=EPSG:4326
* BBOX=XXX,YYY,XXX,YYY

Local Tile sources
~~~~~~~~~~~~~~~~~~~~~~

Local tile sources are the most useful ones, since they can be used offline.
Through those it is possible to load on any smarthphone complex maps as for 
example the following map that has a technical basemap with shapefiles 
overlayed in transparency:

.. figure:: wiki/images/46_tiles_source_ctp.png
   :align: center

To be able to load such maps, one needs to prepare the tiles properly.
This can be done via in several ways as explained in the next section.

The tile folder have then to be loaded in the *maps* folder together
with the description of the tile source::

    url=mytilesfolder/ZZZ/XXX/YYY.png
    minzoom=12
    maxzoom=18
    center=11.40553 46.39478
    type=tms

Nothing changes against the description for the remote source apart of 
the url. The url in this case represents the relative path of the tiles 
folder starting from the *"maps"* folder.

Adding `mbtiles` to Tile sources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Special commands for mbtiles support:

* it is possible, while the application is running, to store the requested tiles to a mbtiles-database
* once stored, that tile will be read from the mbtiles database and no longer requested from the tile-server::

    mbtiles=stadt-berlin.de/berlin_postleitzahlen.mbtiles

   * optional parameter
   * starting with version 3.7.0, a mbtiles file can be used to store the retrieved tiles
   * the given directory must be inside the `/sdcard/maps/` directory
   * if the directory does not exist, it will be created
   * if the mbtiles file does not exist, it will be created
   * all the needed tables and views (also for, the not-used, grid-tables) will be created
   * the metadata-table default values will be set, many from those used in the .mapurl file
   * Note: when images are being retrieved by the application, it will first look in the given mbtiles file
      * if found: the image will be returned
      * if not found: the normal request to the wms or tile-server will be done
         * when the image has been retrieved, it will be stored into the mbtiles file

* mbtiles.metadata parameter `name`::

    name=Berliner Postleitzahlen ; 1:5000 ;1:10000

   * optional parameter, mandatory for mbtiles metadata

* mbtiles.metadata parameter `description`::

    description=Darstellung der Postleitzahlengebiete und deren Postleitzahlen.

   * optional parameter, mandatory for mbtiles metadata

* mbtiles.metadata parameter `defaultzoom`::

    defaultzoom=17

   * optional parameter
   * Note: together with the `center=` parameter, the mbtiles.metadata field will be created
      * `center=13.37771496361961,52.51628011262304,17`
      * this is a 'tillmill' specific parameter and NOT part of the mbtiles specification
          * useful when you have many files of the same area and want to use a common starting point

* mbtiles.metadata parameter `format`::

    format=jpg

   * optional parameter
   * which image format should the tiles be stored in [jpg,png]
   * Note: `jpg` is the default. 
     * in my experience mbtiles files with jpg are about 70% smaller that those with png.

mbtiles based maps 
+++++++++++++++++++++++++++++++++++++++++++++++++

* To have maps showing up in this submenu you will need to store these on the sdcard.
   * it will then automatically appear in the available maps list.
   * avoid files greater than 2.147.483.648 bytes (2 Gigabyte)

.. figure:: wiki/images/mbtiles/mbtiles.01.zoom_13.png
   :align: center

This is a collection of high scaled maps of the area of Berlin between 1870 and 1920

* this mbtiles file is just under 2 Gb - which is the maximum supported by most sdcard with android
   * http://www.mj10777.de/public/download/mbtiles/1870.Berlin_Umgebung.2_gb.mbtiles
   * despite the size, it renders very quickly
* shown at Zoom 13
* with todayâ€™s political district borders as a spatialite geometry
   * there are other geometries active, but cannot be seen due to the minimal zoom-level (to avoid cluttering)
      * Postal Borders (starting at zoom-level 15)
      * Streets (starting at zoom-level 16)
      * Houses (starting at zoom-level 17)


